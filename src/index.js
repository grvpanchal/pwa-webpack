var applePayUiController = (function () {
  var DOMStrings = {
    appleButton: 'ckoApplePay',
    errorMessage: 'ckoApplePayError'
  }
  return {
    DOMStrings,
    displayApplePayButton: function () {
      document.getElementById(DOMStrings.appleButton).style.display = 'block'
    },
    hideApplePayButton: function () {
      document.getElementById(DOMStrings.appleButton).style.display = 'none'
    },
    displayErrorMessage: function () {
      document.getElementById(DOMStrings.errorMessage).style.display = 'block'
    }
  }
})()

var applePayController = (function (uiController) {
  var BACKEND_URL_VALIDATE_SESSION = 'https://webdev.us.lg.com/us/shop/cybersourceapple/index/validate'
  var BACKEND_URL_PAY = 'https://{your backend URL}/pay'

  // High level configuration options.
  var config = {
    payments: {
      acceptedCardSchemes: ['amex', 'masterCard', 'maestro', 'visa', 'mada']
    },
    shop: {
      product_price: 10.0,
      shop_name: 'Demo Shop',
      shop_localisation: {
        currencyCode: 'USD',
        countryCode: 'US'
      }
    },
  }
  /**
   * Checks if Apple Pay is possible in the current environment.
   * @return {boolean} Boolean to check if Apple Pay is possible
   */
  var _applePayAvailable = function () {
    return window.ApplePaySession && ApplePaySession.canMakePayments()
  }

  /**
   * Starts the Apple Pay session using a configuration
   */
  var _startApplePaySession = function (config) {
    var applePaySession = new ApplePaySession(6, config)
    _handleApplePayEvents(applePaySession)
    applePaySession.begin()
  }

  /**
   * This method cals your backend server with the Apple Pay validation URL.
   * On the backend, a POST request will be done to this URL with the Apple Pay certificates
   * and the outcome will be returned
   *
   * @param {string} appleUrl The Apple Pay validation URL generated by Apple
   * @param {function} callback Callback function used to return the server call outcome
   *
   * @return {object} The session payload
   *
   */
  var _validateApplePaySession = function (appleUrl, callback) {

    fetch(BACKEND_URL_VALIDATE_SESSION,
      {
        headers: {
          'Accept': 'application/json',
          'Content-Type': 'application/x-www-urlencoded; charset=UTF-8',
          'Access-Control-Allow-Origin': '*',
        },
        method: "POST",
        body: `url=${appleUrl}`,
      })
      .then(function (response) {
        callback(response.json())
      })
  }

  // here we talk to our backend to send the Apple Pay Payload and return the transaction outcome
  var _performTransaction = function (details, callback) {
    // I'm using AXIOS to do a POST request to the backend but any HTTP client can be used
    axios
      .post(
        BACKEND_URL_PAY,
        {
          token: details.token,
          customerEmail: details.shippingContact.emailAddress,
          billingDetails: details.billingContact,
          shippingDetails: details.shippingContact
        },
        {
          headers: { 'Access-Control-Allow-Origin': '*' }
        }
      )
      .then(function (response) {
        callback(response.data)
      })
  }

  /**
   * This is the main method of the script, since here we handle all the Apple Pay
   * events. Here you are able to populate your shipping methods, react to  shipping methods
   * changes, and many other interaction that the user has with the Apple Pay pup-up.
   *
   * @param {object} Apple Pay Session (the one generate on the button click)
   *
   */
  var _handleApplePayEvents = function (appleSession) {
    // This is the first event that Apple triggers. Here you need to validate the
    // Apple Pay Session from your Back-End
    appleSession.onvalidatemerchant = function (event) {
      _validateApplePaySession(event.validationURL, function (merchantSession) {
        appleSession.completeMerchantValidation(merchantSession)
      })
    }

    // This method is the most important method. It gets triggered after the user has
    // confirmed the transaction with the Touch ID or Face ID. Besides getting all the
    // details about the customer (email, address ...) you also get the Apple Pay payload
    // needed to perform a payment.
    appleSession.onpaymentauthorized = function (event) {
      _performTransaction(event.payment, function (outcome) {
        if (outcome.approved) {
          appleSession.completePayment(ApplePaySession.STATUS_SUCCESS)
          console.log(outcome)
        } else {
          appleSession.completePayment(ApplePaySession.STATUS_FAILURE)
          console.log(outcome)
        }
      })
    }
  }

  /**
   * Sets a onClick listen on the Apple Pay button. When clicked it will
   * begin the Apple Pay session with your configuration
   */
  var _setButtonClickListener = function () {
    document
      .getElementById(uiController.DOMStrings.appleButton)
      .addEventListener('click', function () {
        _startApplePaySession({
          currencyCode: config.shop.shop_localisation.currencyCode,
          countryCode: config.shop.shop_localisation.countryCode,
          merchantCapabilities: [
            'supports3DS',
            'supportsEMV',
            'supportsCredit',
            'supportsDebit'
          ],
          supportedNetworks: config.payments.acceptedCardSchemes,
          total: {
            label: config.shop.shop_name,
            amount: config.shop.product_price,
            type: 'final'
          }
        })
      })
  }

  return {
    init: function () {
      // If Apple Pay is available show the button otherwise show the error
      if (_applePayAvailable()) {
        // Notice we are using the functions from our UI controller
        uiController.displayApplePayButton()
      } else {
        uiController.hideApplePayButton()
        uiController.displayErrorMessage()
      }

      // Set the onClick listener on the Apple Pay button
      _setButtonClickListener()
    }
  }
})(applePayUiController) // passing the UI controller

// Initialise the Apple Pay controller and let the magic happen
applePayController.init()